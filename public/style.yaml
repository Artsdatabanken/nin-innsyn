import:
  - https://tangrams.github.io/blocks/filter/grain.yaml

scene:
  background:
    color: '#fff'

cameras:
  cam:
    type: flat

lights:
  dir:
    type: directional
    direction: [.1, .5, -1]
    diffuse: .7
    ambient: .5

sources:
  osm:
    type: MVT
    url: 'https://tiles.artsdatabanken.no/data/openstreetmap/{z}/{x}/{y}.pbf'
    max_zoom: 14
  # This source should be dynamically created and set on the multiply-layer
  multiply:
    type: Raster
    url: 'https://tiles.artsdatabanken.no/data/NA_T1/{z}/{x}/{y}.png'
    rasters: [MI_KA-A]
    max_zoom: 11
  RL_NT:
    type: Raster
    url: 'https://tiles.artsdatabanken.no/data/RL_NT/{z}/{x}/{y}.png'
    max_zoom: 11
  MI_KA-A:
    type: Raster
    url: 'https://tiles.artsdatabanken.no/data/MI_KA-A/{z}/{x}/{y}.png'
    max_zoom: 11
  MI_KA-F:
    type: Raster
    url: 'https://tiles.artsdatabanken.no/data/MI_KA-F/{z}/{x}/{y}.png'
    max_zoom: 11

layers:
  water:
    data:
      source: osm
      layer: water
    draw:
      water:
        order: 10
        color: [0.4, 0.4, 0.4, 1.0]
  waterway:
    data:
      source: osm
      layer: waterway
    draw:
      lines:
        order: 11
        color: [0.4, 0.4, 0.4, 1.0]
        width: 1.3px
  transportation:
    data:
      source: osm
      layer: transportation
    draw:
      lines:
        order: 200
        color: [0.3, 0.3, 0.3, 1.0]
        width: 1.2px
styles:
  water:
    base: polygons
    mix: filter-grain
    shaders:
      defines:
        GRAIN_AMOUNT: .8
        NUM_OCTAVES: 3
  boundary:
    base: lines
    order: 150
    blend: overlay
    dash: [2, 0.5]

  tricolor:
    base: polygons
    blend: multiply
    raster: color
    shaders:
      blocks:
        filter: |
          vec3 colorx = vec3(0.392157,1,0.015686);
          vec3 colory = vec3(0.015686,0.768627,1);
          vec3 color_overlap = vec3(0.975,0.,0.);
          vec3 transparent = vec3(1.);
          float x = sampleRaster(0).r;
          float y = sampleRaster(1).r;
          vec3 cx = mix(colorx * x + colory * y, color_overlap, x * y);
          color = vec4(mix(transparent,cx, x + y),1.);
  rainbows:
    base: polygons
    blend: 'overlay'
    raster: color
    shaders:
      blocks:
        filter: |
          float r, g, b = 0.;
          float a = 1.;
          float i = sampleRaster(0).r * sampleRaster(1).r;
          if(i == 0.){
            a = 0.;
          }
          // Up to cyan
          else if(i <= .25) {
            b = 1.;
            g = i / .25;
          }
          // Up to green
          else if(i <= .5) {
            g = 1.;
            b = 1. - ((i - .25) / .25);
          }
          // Up to yellow
          else if(i <= .75) {
            g = 1. ;
            r = (i - .5) / .25;
          }
          // Up to red
          else {
            r = 1.;
            g = 1. - ((i - .75) / .25) ;
          }
          color = vec4(r, g, b, a);
